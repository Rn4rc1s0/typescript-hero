{
  "name": "typescript-hero",
  "displayName": "TypeScript Hero",
  "description": "Additional toolings for typescript",
  "icon": "etc/icon.png",
  "galleryBanner": {
    "color": "#1e324c",
    "theme": "dark"
  },
  "version": "0.0.0-development",
  "publisher": "rbbit",
  "engines": {
    "vscode": "^1.17.0",
    "node": ">=8.0.0",
    "npm": ">=5.3.0"
  },
  "categories": [
    "Formatters",
    "Programming Languages"
  ],
  "main": "./out/src/extension",
  "author": "Christoph BÃ¼hler <christoph.buehler@bluewin.ch>",
  "license": "MIT",
  "contributors": [],
  "badges": [
    {
      "url": "https://img.shields.io/travis/buehler/typescript-hero.svg",
      "href": "https://travis-ci.org/buehler/typescript-hero",
      "description": "Travis build"
    },
    {
      "url": "https://ci.appveyor.com/api/projects/status/p1vbbyh69j4s0rbh?svg=true",
      "href": "https://ci.appveyor.com/project/buehler/typescript-hero",
      "description": "AppVeyor build"
    },
    {
      "url": "https://codecov.io/gh/buehler/typescript-hero/branch/master/graph/badge.svg",
      "href": "https://codecov.io/gh/buehler/typescript-hero",
      "description": "Code coverage"
    },
    {
      "url": "https://img.shields.io/github/issues/buehler/typescript-hero.svg",
      "href": "https://github.com/buehler/typescript-hero/issues",
      "description": "GitHub issues"
    },
    {
      "url": "https://img.shields.io/github/issues-pr/buehler/typescript-hero.svg",
      "href": "https://github.com/buehler/typescript-hero/pulls",
      "description": "GitHub pull requests"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/buehler/typescript-hero.git"
  },
  "bugs": {
    "url": "https://github.com/buehler/typescript-hero/issues"
  },
  "homepage": "https://buehler.github.io/typescript-hero/",
  "scripts": {
    "postinstall": "node ./etc/test_install.js && node ./node_modules/vscode/bin/install || echo 'vscode/bin/install not found'",
    "clean": "del-cli ./out ./coverage",
    "build": "npm run clean && tsc -p ./config/tsconfig.build.json",
    "develop": "npm run clean && tsc -p .",
    "develop:test-single": "npm run clean && tsc -p ./config/tsconfig.test-single-workspace.json --watch",
    "develop:test-multi": "npm run clean && tsc -p ./config/tsconfig.test-multi-workspace.json --watch",
    "lint": "tslint -c ./tslint.json -p ./config/tsconfig.build.json",
    "test:single-workspace": "npm run lint && npm run clean && tsc -p ./config/tsconfig.test-single-workspace.json && node ./node_modules/vscode/bin/test",
    "test:multi-workspace": "npm run lint && npm run clean && tsc -p ./config/tsconfig.test-multi-workspace.json && node ./node_modules/vscode/bin/test",
    "semantic-release": "semantic-release"
  },
  "release": {
    "verifyConditions": [
      "semantic-release-vsce",
      "@semantic-release/github"
    ],
    "getLastRelease": "./etc/get-last-release",
    "prepare": false,
    "publish": [
      {
        "path": "semantic-release-vsce",
        "packageVsix": "rbbit.typescript-hero.vsix"
      },
      {
        "path": "@semantic-release/github",
        "assets": "rbbit.typescript-hero.vsix"
      }
    ],
    "success": false,
    "fail": false
  },
  "devDependencies": {
    "@semantic-release/git": "^7.0.4",
    "@smartive/tslint-config": "^4.0.0",
    "@types/chai": "^4.1.6",
    "@types/fs-extra": "^5.0.4",
    "@types/glob": "^7.1.1",
    "@types/istanbul": "^0.4.30",
    "@types/mocha": "^5.2.5",
    "@types/node": "^10.11.4",
    "@types/reflect-metadata": "0.1.0",
    "@types/sinon": "^5.0.3",
    "@types/sinon-chai": "^3.2.0",
    "chai": "^4.2.0",
    "chai-jest-snapshot": "^2.0.0",
    "decache": "^4.4.0",
    "del-cli": "^1.1.0",
    "istanbul": "^0.4.5",
    "remap-istanbul": "^0.12.0",
    "semantic-release": "^15.9.17",
    "semantic-release-vsce": "^2.1.2",
    "sinon": "^6.3.5",
    "sinon-chai": "^3.2.0",
    "tslint": "^5.11.0",
    "tsutils": "^3.0.0",
    "vscode": "^1.1.21"
  },
  "dependencies": {
    "fs-extra": "^7.0.0",
    "inversify": "^4.13.0",
    "reflect-metadata": "^0.1.12",
    "tslib": "^1.9.3",
    "typescript": "~3.1.1",
    "typescript-parser": "^2.6.1",
    "winston": "^3.1.0"
  },
  "activationEvents": [
    "onLanguage:typescript",
    "onLanguage:typescriptreact",
    "onLanguage:javascript",
    "onLanguage:javascriptreact"
  ],
  "contributes": {
    "commands": [
      {
        "command": "typescriptHero.imports.organize",
        "title": "TS Hero: Organize imports (sort and remove unused)"
      }
    ],
    "keybindings": [
      {
        "command": "typescriptHero.imports.organize",
        "key": "ctrl+alt+o",
        "when": "editorTextFocus"
      }
    ],
    "configuration": {
      "title": "TypeScript Hero",
      "properties": {
        "typescriptHero.verbosity": {
          "enum": [
            "error",
            "warn",
            "info",
            "debug"
          ],
          "default": "warn",
          "description": "Defines the log output level in the output window. In the log file, it's always info or debug.",
          "scope": "window"
        },
        "typescriptHero.imports.insertSpaceBeforeAndAfterImportBraces": {
          "type": "boolean",
          "default": true,
          "description": "Defines if there should be a space inside the curly braces of an import statement.",
          "scope": "resource"
        },
        "typescriptHero.imports.removeTrailingIndex": {
          "type": "boolean",
          "default": true,
          "description": "Defines if a trailing '/index' should be removed from imports.",
          "scope": "resource"
        },
        "typescriptHero.imports.insertSemicolons": {
          "type": "boolean",
          "default": true,
          "description": "Defines if there should be a semicolon at the end of a statement.",
          "scope": "resource"
        },
        "typescriptHero.imports.stringQuoteStyle": {
          "enum": [
            "'",
            "\""
          ],
          "default": "'",
          "description": "Defines if single or double quotes should be used.",
          "scope": "resource"
        },
        "typescriptHero.imports.multiLineWrapThreshold": {
          "type": "number",
          "minimum": 1,
          "multipleOf": 1,
          "default": 125,
          "description": "Defines the threshold when an import should be wrapped into a multiline import.",
          "scope": "resource"
        },
        "typescriptHero.imports.multiLineTrailingComma": {
          "type": "boolean",
          "default": true,
          "description": "Defined if multi line imports contain the last trailing comma.",
          "scope": "resource"
        },
        "typescriptHero.imports.organizeOnSave": {
          "type": "boolean",
          "default": false,
          "description": "Defines if the imports should be organized on save.",
          "scope": "resource"
        },
        "typescriptHero.imports.organizeSortsByFirstSpecifier": {
          "type": "boolean",
          "default": false,
          "description": "Defines if the imports are organized by first specifier/alias instead of module path.",
          "scope": "resource"
        },
        "typescriptHero.imports.disableImportsSorting": {
          "type": "boolean",
          "default": false,
          "description": "Defines if sorting is disable during organize imports.",
          "scope": "resource"
        },
        "typescriptHero.imports.disableImportRemovalOnOrganize": {
          "type": "boolean",
          "default": false,
          "description": "Defines if any imports should be removed at all on an organize imports command.",
          "scope": "resource"
        },
        "typescriptHero.imports.ignoredFromRemoval": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "default": [
            "react"
          ],
          "description": "Defines imports (libraries, so the 'from' part), which are not removed during 'organize imports'.",
          "scope": "resource"
        },
        "typescriptHero.imports.grouping": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "enum": [
                  "Modules",
                  "Plains",
                  "Workspace",
                  "Remaining"
                ]
              },
              {
                "type": "string",
                "pattern": "\\/[A-Za-z-_0-9]+\\/"
              },
              {
                "type": "object",
                "properties": {
                  "identifier": {
                    "enum": [
                      "Modules",
                      "Plains",
                      "Workspace",
                      "Remaining"
                    ]
                  },
                  "order": {
                    "enum": [
                      "asc",
                      "desc"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "identifier",
                  "order"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "identifier": {
                    "type": "string",
                    "pattern": "\\/[A-Za-z-_0-9]+\\/"
                  },
                  "order": {
                    "enum": [
                      "asc",
                      "desc"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "identifier",
                  "order"
                ]
              }
            ]
          },
          "default": [
            "Plains",
            "Modules",
            "Workspace"
          ],
          "description": "Defines the groups of the imports ordering. Multiple groups possible, see readme for instructions.",
          "scope": "resource"
        }
      }
    }
  }
}
